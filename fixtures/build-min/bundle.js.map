{
  "version": 3,
  "sources": [
    "node_modules/browser-pack-flat/_prelude",
    "node_modules/nanohtml/lib/append-child.js",
    "fixtures/js/index.js",
    "fixtures/js/component.js"
  ],
  "names": [
    "trailingNewlineRegex",
    "leadingNewlineRegex",
    "trailingSpaceRegex",
    "leadingSpaceRegex",
    "multiSpaceRegex",
    "TEXT_TAGS",
    "VERBATIM_TAGS",
    "document",
    "querySelector",
    "appendChild",
    "a",
    "b",
    "c",
    "Array",
    "isArray",
    "d",
    "e",
    "f",
    "g",
    "nodeName",
    "toLowerCase",
    "h",
    "j",
    "i",
    "length",
    "Date",
    "RegExp",
    "toString",
    "k",
    "childNodes",
    "nodeValue",
    "createTextNode",
    "indexOf",
    "replace",
    "removeChild",
    "nodeType",
    "l",
    "heading"
  ],
  "mappings": "CAAA,WACA,aCDA,IAAIA,EAAuB,WACvBC,EAAsB,WACtBC,EAAqB,SACrBC,EAAoB,SACpBC,EAAkB,WAElBC,GACF,IAAK,OAAQ,IAAK,MAAO,MAAO,KAAM,OAAQ,OAAQ,MAAO,KAAM,IACnE,MAAO,OAAQ,IAAK,KAAM,KAAM,MAAO,OAAQ,IAAK,MAAO,QAAS,OACpE,SAAU,MAAO,MAAO,OAAQ,IAAK,MAAO,OAG1CC,GACF,OAAQ,MAAO,YCXjBC,SAASC,cAAc,QAAQC,YCItB,mFFUQ,SAASC,EAAaC,EAAIC,GACzC,GAAKC,MAAMC,QAAQF,GAOnB,IALA,IAGIG,EAAOC,EAGLC,EANFC,EAAWP,EAAGQ,SAASC,cAEvBC,GAAA,EAGKC,EAAI,EAAGC,EAAMX,EAAOY,OAAQF,EAAIC,EAAKD,IAE5C,GAAAL,EADWL,EAAOU,GACdT,MAAMC,QAAQG,GAChBP,EAAYC,EAAIM,OADlB,EAKoB,iBAATA,GACO,kBAATA,GACS,mBAATA,GACPA,aAAgBQ,MAChBR,aAAgBS,UAChBT,EAAOA,EAAKU,YAGd,IAAIC,EAAYjB,EAAGkB,WAAWlB,EAAGkB,WAAWL,OAAS,GAGrD,GAAoB,iBAATP,EACTI,GAAA,EAGIO,GAAoC,UAAvBA,EAAUT,SACzBS,EAAUE,WAAab,GAIvBA,EAAOV,SAASwB,eAAed,GAC/BN,EAAGF,YAAYQ,GACfW,EAAYX,GAKVK,IAAMC,EAAM,IACdF,GAAA,GAGqC,IAAjChB,EAAU2B,QAAQd,KACiB,IAArCZ,EAAc0B,QAAQd,GAMR,MALdH,EAAQa,EAAUE,UACfG,QAAQhC,EAAqB,IAC7BgC,QAAQ/B,EAAoB,IAC5B+B,QAAQjC,EAAsB,IAC9BiC,QAAQ7B,EAAiB,MAE1BO,EAAGuB,YAAYN,GAEfA,EAAUE,UAAYf,GAEsB,IAArCT,EAAc0B,QAAQd,KAI/BF,EAAe,IAANM,EAAU,GAAK,IACxBP,EAAQa,EAAUE,UACfG,QAAQhC,EAAqBe,GAC7BiB,QAAQ9B,EAAmB,KAC3B8B,QAAQ/B,EAAoB,IAC5B+B,QAAQjC,EAAsB,IAC9BiC,QAAQ7B,EAAiB,KAC5BwB,EAAUE,UAAYf,SAKrB,GAAIE,GAAQA,EAAKkB,SAAU,CAE5Bd,IACFA,GAAA,GAIqC,IAAjChB,EAAU2B,QAAQd,KACiB,IAArCZ,EAAc0B,QAAQd,GAOR,MANdH,EAAQa,EAAUE,UACfG,QAAQhC,EAAqB,IAC7BgC,QAAQjC,EAAsB,IAC9BiC,QAAQ7B,EAAiB,MAI1BO,EAAGuB,YAAYN,GAEfA,EAAUE,UAAYf,GAIsB,IAArCT,EAAc0B,QAAQd,KAC/BH,EAAQa,EAAUE,UACfG,QAAQ9B,EAAmB,KAC3B8B,QAAQhC,EAAqB,IAC7BgC,QAAQjC,EAAsB,IAC9BiC,QAAQ7B,EAAiB,KAC5BwB,EAAUE,UAAYf,IAK1B,IAAIqB,EAAYnB,EAAKE,SACjBiB,IAAWlB,EAAWkB,EAAUhB,eAGpCT,EAAGF,YAAYQ,0BEzHnB,EDJoDoB,QAAS,2BFF/D",
  "sourcesContent": [
    "(function(){\n",
    "var trailingNewlineRegex = /\\n[\\s]+$/\nvar leadingNewlineRegex = /^\\n[\\s]+/\nvar trailingSpaceRegex = /[\\s]+$/\nvar leadingSpaceRegex = /^[\\s]+/\nvar multiSpaceRegex = /[\\n\\s]+/g\n\nvar TEXT_TAGS = [\n  'a', 'abbr', 'b', 'bdi', 'bdo', 'br', 'cite', 'data', 'dfn', 'em', 'i',\n  'kbd', 'mark', 'q', 'rp', 'rt', 'rtc', 'ruby', 's', 'amp', 'small', 'span',\n  'strong', 'sub', 'sup', 'time', 'u', 'var', 'wbr'\n]\n\nvar VERBATIM_TAGS = [\n  'code', 'pre', 'textarea'\n]\n\nmodule.exports = function appendChild (el, childs) {\n  if (!Array.isArray(childs)) return\n\n  var nodeName = el.nodeName.toLowerCase()\n\n  var hadText = false\n  var value, leader\n\n  for (var i = 0, len = childs.length; i < len; i++) {\n    var node = childs[i]\n    if (Array.isArray(node)) {\n      appendChild(el, node)\n      continue\n    }\n\n    if (typeof node === 'number' ||\n      typeof node === 'boolean' ||\n      typeof node === 'function' ||\n      node instanceof Date ||\n      node instanceof RegExp) {\n      node = node.toString()\n    }\n\n    var lastChild = el.childNodes[el.childNodes.length - 1]\n\n    // Iterate over text nodes\n    if (typeof node === 'string') {\n      hadText = true\n\n      // If we already had text, append to the existing text\n      if (lastChild && lastChild.nodeName === '#text') {\n        lastChild.nodeValue += node\n\n      // We didn't have a text node yet, create one\n      } else {\n        node = document.createTextNode(node)\n        el.appendChild(node)\n        lastChild = node\n      }\n\n      // If this is the last of the child nodes, make sure we close it out\n      // right\n      if (i === len - 1) {\n        hadText = false\n        // Trim the child text nodes if the current node isn't a\n        // node where whitespace matters.\n        if (TEXT_TAGS.indexOf(nodeName) === -1 &&\n          VERBATIM_TAGS.indexOf(nodeName) === -1) {\n          value = lastChild.nodeValue\n            .replace(leadingNewlineRegex, '')\n            .replace(trailingSpaceRegex, '')\n            .replace(trailingNewlineRegex, '')\n            .replace(multiSpaceRegex, ' ')\n          if (value === '') {\n            el.removeChild(lastChild)\n          } else {\n            lastChild.nodeValue = value\n          }\n        } else if (VERBATIM_TAGS.indexOf(nodeName) === -1) {\n          // The very first node in the list should not have leading\n          // whitespace. Sibling text nodes should have whitespace if there\n          // was any.\n          leader = i === 0 ? '' : ' '\n          value = lastChild.nodeValue\n            .replace(leadingNewlineRegex, leader)\n            .replace(leadingSpaceRegex, ' ')\n            .replace(trailingSpaceRegex, '')\n            .replace(trailingNewlineRegex, '')\n            .replace(multiSpaceRegex, ' ')\n          lastChild.nodeValue = value\n        }\n      }\n\n    // Iterate over DOM nodes\n    } else if (node && node.nodeType) {\n      // If the last node was a text node, make sure it is properly closed out\n      if (hadText) {\n        hadText = false\n\n        // Trim the child text nodes if the current node isn't a\n        // text node or a code node\n        if (TEXT_TAGS.indexOf(nodeName) === -1 &&\n          VERBATIM_TAGS.indexOf(nodeName) === -1) {\n          value = lastChild.nodeValue\n            .replace(leadingNewlineRegex, '')\n            .replace(trailingNewlineRegex, '')\n            .replace(multiSpaceRegex, ' ')\n\n          // Remove empty text nodes, append otherwise\n          if (value === '') {\n            el.removeChild(lastChild)\n          } else {\n            lastChild.nodeValue = value\n          }\n        // Trim the child nodes if the current node is not a node\n        // where all whitespace must be preserved\n        } else if (VERBATIM_TAGS.indexOf(nodeName) === -1) {\n          value = lastChild.nodeValue\n            .replace(leadingSpaceRegex, ' ')\n            .replace(leadingNewlineRegex, '')\n            .replace(trailingNewlineRegex, '')\n            .replace(multiSpaceRegex, ' ')\n          lastChild.nodeValue = value\n        }\n      }\n\n      // Store the last nodename\n      var _nodeName = node.nodeName\n      if (_nodeName) nodeName = _nodeName.toLowerCase()\n\n      // Append the node to the DOM\n      el.appendChild(node)\n    }\n  }\n}\n",
    "const component = require('./component.js')\n\ndocument.querySelector('body').appendChild(component({heading: 'Testing 1 2 3'}))\n",
    "const assert = require('assert')\nconst html = require('nanohtml')\n\nmodule.exports = function (state) {\n  assert.equal(typeof state, 'object')\n\n  return html`<h1 class=\"foo\">${state.heading}</h1>`\n}\n"
  ],
  "sourceRoot": ""
}