{
  "version": 3,
  "sources": [
    "../../node_modules/browser-pack-flat/_prelude",
    "component.js",
    "../../node_modules/nanohtml/lib/append-child.js",
    "index.js"
  ],
  "names": [
    "state",
    "_foo",
    "trailingNewlineRegex",
    "leadingNewlineRegex",
    "trailingSpaceRegex",
    "leadingSpaceRegex",
    "multiSpaceRegex",
    "TEXT_TAGS",
    "VERBATIM_TAGS",
    "document",
    "querySelector",
    "appendChild",
    "heading",
    "createElement",
    "setAttribute",
    "el",
    "childs",
    "Array",
    "isArray",
    "value",
    "leader",
    "nodeName",
    "toLowerCase",
    "hadText",
    "i",
    "len",
    "length",
    "node",
    "Date",
    "RegExp",
    "toString",
    "lastChild",
    "childNodes",
    "nodeValue",
    "createTextNode",
    "indexOf",
    "replace",
    "removeChild",
    "nodeType",
    "_nodeName",
    "_$appendChild_3"
  ],
  "mappings": "AAAA,ICG2BA,EAAOC,ECH9BC,EACAC,EACAC,EACAC,EACAC,EAEAC,EAMAC,EAZAN,EAAuB,WACvBC,EAAsB,WACtBC,EAAqB,SACrBC,EAAoB,SACpBC,EAAkB,WAElBC,EAAY,CACd,IAAK,OAAQ,IAAK,MAAO,MAAO,KAAM,OAAQ,OAAQ,MAAO,KAAM,IACnE,MAAO,OAAQ,IAAK,KAAM,KAAM,MAAO,OAAQ,IAAK,MAAO,QAAS,OACpE,SAAU,MAAO,MAAO,OAAQ,IAAK,MAAO,OAG1CC,EAAgB,CAClB,OAAQ,MAAO,YCXjBC,SAASC,cAAc,QAAQC,aFCJX,EED0B,CAAEY,QAAS,kBFI9DX,EAAAQ,SAAAI,cAAA,OAAAC,aAAA,QAAA,OCUe,SAASH,EAAaI,EAAIC,GACzC,GAAKC,MAAMC,QAAQF,GAOnB,IALA,IAGIG,EAAOC,EAHPC,EAAWN,EAAGM,SAASC,cAEvBC,GAAU,EAGLC,EAAI,EAAGC,EAAMT,EAAOU,OAAQF,EAAIC,EAAKD,IAAK,CACjD,IAAIG,EAAOX,EAAOQ,GAClB,GAAIP,MAAMC,QAAQS,GAChBhB,EAAYI,EAAIY,OADlB,EAKoB,iBAATA,GACO,kBAATA,GACS,mBAATA,GACPA,aAAgBC,MAChBD,aAAgBE,UAChBF,EAAOA,EAAKG,YAGd,IAAIC,EAAYhB,EAAGiB,WAAWjB,EAAGiB,WAAWN,OAAS,GAGrD,GAAoB,iBAATC,EACTJ,GAAU,EAGNQ,GAAoC,UAAvBA,EAAUV,SACzBU,EAAUE,WAAaN,GAIvBA,EAAOlB,SAASyB,eAAeP,GAC/BZ,EAAGJ,YAAYgB,GACfI,EAAYJ,GAKVH,IAAMC,EAAM,IACdF,GAAU,GAG2B,IAAjChB,EAAU4B,QAAQd,KACiB,IAArCb,EAAc2B,QAAQd,GAMR,MALdF,EAAQY,EAAUE,UACfG,QAAQjC,EAAqB,IAC7BiC,QAAQhC,EAAoB,IAC5BgC,QAAQlC,EAAsB,IAC9BkC,QAAQ9B,EAAiB,MAE1BS,EAAGsB,YAAYN,GAEfA,EAAUE,UAAYd,GAEsB,IAArCX,EAAc2B,QAAQd,KAI/BD,EAAe,IAANI,EAAU,GAAK,IACxBL,EAAQY,EAAUE,UACfG,QAAQjC,EAAqBiB,GAC7BgB,QAAQ/B,EAAmB,KAC3B+B,QAAQhC,EAAoB,IAC5BgC,QAAQlC,EAAsB,IAC9BkC,QAAQ9B,EAAiB,KAC5ByB,EAAUE,UAAYd,SAKrB,GAAIQ,GAAQA,EAAKW,SAAU,CAE5Bf,IACFA,GAAU,GAI2B,IAAjChB,EAAU4B,QAAQd,KACiB,IAArCb,EAAc2B,QAAQd,GAOR,MANdF,EAAQY,EAAUE,UACfG,QAAQjC,EAAqB,IAC7BiC,QAAQlC,EAAsB,IAC9BkC,QAAQ9B,EAAiB,MAI1BS,EAAGsB,YAAYN,GAEfA,EAAUE,UAAYd,GAIsB,IAArCX,EAAc2B,QAAQd,KAC/BF,EAAQY,EAAUE,UACfG,QAAQ/B,EAAmB,KAC3B+B,QAAQjC,EAAqB,IAC7BiC,QAAQlC,EAAsB,IAC9BkC,QAAQ9B,EAAiB,KAC5ByB,EAAUE,UAAYd,IAK1B,IAAIoB,EAAYZ,EAAKN,SACjBkB,IAAWlB,EAAWkB,EAAUjB,eAGpCP,EAAGJ,YAAYgB,MDzHnBa,CAAAvC,EAAA,CAA8BD,EAAMY,UAApCX",
  "sourcesContent": [
    "(function(){\n",
    "const assert = require('assert')\nconst html = require('nanohtml')\n\nmodule.exports = function (state) {\n  assert.strictEqual(typeof state, 'object')\n\n  return html`<h1 class=\"foo\">${state.heading}</h1>`\n}\n",
    "var trailingNewlineRegex = /\\n[\\s]+$/\nvar leadingNewlineRegex = /^\\n[\\s]+/\nvar trailingSpaceRegex = /[\\s]+$/\nvar leadingSpaceRegex = /^[\\s]+/\nvar multiSpaceRegex = /[\\n\\s]+/g\n\nvar TEXT_TAGS = [\n  'a', 'abbr', 'b', 'bdi', 'bdo', 'br', 'cite', 'data', 'dfn', 'em', 'i',\n  'kbd', 'mark', 'q', 'rp', 'rt', 'rtc', 'ruby', 's', 'amp', 'small', 'span',\n  'strong', 'sub', 'sup', 'time', 'u', 'var', 'wbr'\n]\n\nvar VERBATIM_TAGS = [\n  'code', 'pre', 'textarea'\n]\n\nmodule.exports = function appendChild (el, childs) {\n  if (!Array.isArray(childs)) return\n\n  var nodeName = el.nodeName.toLowerCase()\n\n  var hadText = false\n  var value, leader\n\n  for (var i = 0, len = childs.length; i < len; i++) {\n    var node = childs[i]\n    if (Array.isArray(node)) {\n      appendChild(el, node)\n      continue\n    }\n\n    if (typeof node === 'number' ||\n      typeof node === 'boolean' ||\n      typeof node === 'function' ||\n      node instanceof Date ||\n      node instanceof RegExp) {\n      node = node.toString()\n    }\n\n    var lastChild = el.childNodes[el.childNodes.length - 1]\n\n    // Iterate over text nodes\n    if (typeof node === 'string') {\n      hadText = true\n\n      // If we already had text, append to the existing text\n      if (lastChild && lastChild.nodeName === '#text') {\n        lastChild.nodeValue += node\n\n      // We didn't have a text node yet, create one\n      } else {\n        node = document.createTextNode(node)\n        el.appendChild(node)\n        lastChild = node\n      }\n\n      // If this is the last of the child nodes, make sure we close it out\n      // right\n      if (i === len - 1) {\n        hadText = false\n        // Trim the child text nodes if the current node isn't a\n        // node where whitespace matters.\n        if (TEXT_TAGS.indexOf(nodeName) === -1 &&\n          VERBATIM_TAGS.indexOf(nodeName) === -1) {\n          value = lastChild.nodeValue\n            .replace(leadingNewlineRegex, '')\n            .replace(trailingSpaceRegex, '')\n            .replace(trailingNewlineRegex, '')\n            .replace(multiSpaceRegex, ' ')\n          if (value === '') {\n            el.removeChild(lastChild)\n          } else {\n            lastChild.nodeValue = value\n          }\n        } else if (VERBATIM_TAGS.indexOf(nodeName) === -1) {\n          // The very first node in the list should not have leading\n          // whitespace. Sibling text nodes should have whitespace if there\n          // was any.\n          leader = i === 0 ? '' : ' '\n          value = lastChild.nodeValue\n            .replace(leadingNewlineRegex, leader)\n            .replace(leadingSpaceRegex, ' ')\n            .replace(trailingSpaceRegex, '')\n            .replace(trailingNewlineRegex, '')\n            .replace(multiSpaceRegex, ' ')\n          lastChild.nodeValue = value\n        }\n      }\n\n    // Iterate over DOM nodes\n    } else if (node && node.nodeType) {\n      // If the last node was a text node, make sure it is properly closed out\n      if (hadText) {\n        hadText = false\n\n        // Trim the child text nodes if the current node isn't a\n        // text node or a code node\n        if (TEXT_TAGS.indexOf(nodeName) === -1 &&\n          VERBATIM_TAGS.indexOf(nodeName) === -1) {\n          value = lastChild.nodeValue\n            .replace(leadingNewlineRegex, '')\n            .replace(trailingNewlineRegex, '')\n            .replace(multiSpaceRegex, ' ')\n\n          // Remove empty text nodes, append otherwise\n          if (value === '') {\n            el.removeChild(lastChild)\n          } else {\n            lastChild.nodeValue = value\n          }\n        // Trim the child nodes if the current node is not a node\n        // where all whitespace must be preserved\n        } else if (VERBATIM_TAGS.indexOf(nodeName) === -1) {\n          value = lastChild.nodeValue\n            .replace(leadingSpaceRegex, ' ')\n            .replace(leadingNewlineRegex, '')\n            .replace(trailingNewlineRegex, '')\n            .replace(multiSpaceRegex, ' ')\n          lastChild.nodeValue = value\n        }\n      }\n\n      // Store the last nodename\n      var _nodeName = node.nodeName\n      if (_nodeName) nodeName = _nodeName.toLowerCase()\n\n      // Append the node to the DOM\n      el.appendChild(node)\n    }\n  }\n}\n",
    "const component = require('./component.js')\n\ndocument.querySelector('body').appendChild(component({ heading: 'Testing 1 2 3' }))\n"
  ],
  "sourceRoot": ""
}